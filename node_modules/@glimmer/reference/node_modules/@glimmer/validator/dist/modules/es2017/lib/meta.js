import { DEBUG } from '@glimmer/env';
import { DIRTY_TAG, createUpdatableTag } from './validators';
import { assertTagNotConsumed } from './debug';
import { unwrap } from './utils';

function isObjectLike(u) {
  return typeof u === 'object' && u !== null || typeof u === 'function';
}

const TRACKED_TAGS = new WeakMap();
export function dirtyTagFor(obj, key, meta) {
  if (DEBUG && !isObjectLike(obj)) {
    throw new Error(`BUG: Can't update a tag for a primitive`);
  }

  let tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

  if (tags === undefined) return; // Dirty the tag for the specific property if it exists

  let propertyTag = tags.get(key);

  if (propertyTag !== undefined) {
    if (DEBUG) {
      unwrap(assertTagNotConsumed)(propertyTag, obj, key);
    }

    DIRTY_TAG(propertyTag);
  }
}
export function tagMetaFor(obj) {
  let tags = TRACKED_TAGS.get(obj);

  if (tags === undefined) {
    tags = new Map();
    TRACKED_TAGS.set(obj, tags);
  }

  return tags;
}
export function tagFor(obj, key, meta) {
  let tags = meta === undefined ? tagMetaFor(obj) : meta;
  let tag = tags.get(key);

  if (tag === undefined) {
    tag = createUpdatableTag();
    tags.set(key, tag);
  }

  return tag;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLEtBQVQsUUFBc0IsY0FBdEI7QUFDQSxTQUFTLFNBQVQsRUFBb0Isa0JBQXBCLFFBQXlFLGNBQXpFO0FBQ0EsU0FBUyxvQkFBVCxRQUFxQyxTQUFyQztBQUNBLFNBQW9CLE1BQXBCLFFBQWtDLFNBQWxDOztBQUVBLFNBQVMsWUFBVCxDQUF5QixDQUF6QixFQUE2QjtBQUMzQixTQUFRLE9BQU8sQ0FBUCxLQUFhLFFBQWIsSUFBeUIsQ0FBQyxLQUFLLElBQWhDLElBQXlDLE9BQU8sQ0FBUCxLQUFhLFVBQTdEO0FBQ0Q7O0FBTUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxPQUFKLEVBQXJCO0FBRUEsT0FBTSxTQUFVLFdBQVYsQ0FDSixHQURJLEVBRUosR0FGSSxFQUdKLElBSEksRUFHVTtBQUVkLE1BQUksS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUQsQ0FBMUIsRUFBaUM7QUFDL0IsVUFBTSxJQUFJLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLFNBQVQsR0FBcUIsWUFBWSxDQUFDLEdBQWIsQ0FBaUIsR0FBakIsQ0FBckIsR0FBNkMsSUFBeEQsQ0FOYyxDQVFkOztBQUNBLE1BQUksSUFBSSxLQUFLLFNBQWIsRUFBd0IsT0FUVixDQVdkOztBQUNBLE1BQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsR0FBVCxDQUFsQjs7QUFFQSxNQUFJLFdBQVcsS0FBSyxTQUFwQixFQUErQjtBQUM3QixRQUFJLEtBQUosRUFBVztBQUNULE1BQUEsTUFBTSxDQUFDLG9CQUFELENBQU4sQ0FBNkIsV0FBN0IsRUFBMEMsR0FBMUMsRUFBK0MsR0FBL0M7QUFDRDs7QUFFRCxJQUFBLFNBQVMsQ0FBQyxXQUFELENBQVQ7QUFDRDtBQUNGO0FBRUQsT0FBTSxTQUFVLFVBQVYsQ0FBcUIsR0FBckIsRUFBZ0M7QUFDcEMsTUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDLEdBQWIsQ0FBaUIsR0FBakIsQ0FBWDs7QUFFQSxNQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLElBQUEsSUFBSSxHQUFHLElBQUksR0FBSixFQUFQO0FBRUEsSUFBQSxZQUFZLENBQUMsR0FBYixDQUFpQixHQUFqQixFQUFzQixJQUF0QjtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEO0FBRUQsT0FBTSxTQUFVLE1BQVYsQ0FDSixHQURJLEVBRUosR0FGSSxFQUdKLElBSEksRUFHVTtBQUVkLE1BQUksSUFBSSxHQUFHLElBQUksS0FBSyxTQUFULEdBQXFCLFVBQVUsQ0FBQyxHQUFELENBQS9CLEdBQXVDLElBQWxEO0FBQ0EsTUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxHQUFULENBQVY7O0FBRUEsTUFBSSxHQUFHLEtBQUssU0FBWixFQUF1QjtBQUNyQixJQUFBLEdBQUcsR0FBRyxrQkFBa0IsRUFBeEI7QUFDQSxJQUFBLElBQUksQ0FBQyxHQUFMLENBQVMsR0FBVCxFQUFjLEdBQWQ7QUFDRDs7QUFFRCxTQUFPLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHIH0gZnJvbSAnQGdsaW1tZXIvZW52JztcbmltcG9ydCB7IERJUlRZX1RBRywgY3JlYXRlVXBkYXRhYmxlVGFnLCBVcGRhdGFibGVUYWcsIENvbnN0YW50VGFnIH0gZnJvbSAnLi92YWxpZGF0b3JzJztcbmltcG9ydCB7IGFzc2VydFRhZ05vdENvbnN1bWVkIH0gZnJvbSAnLi9kZWJ1Zyc7XG5pbXBvcnQgeyBJbmRleGFibGUsIHVud3JhcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiBpc09iamVjdExpa2U8VD4odTogVCk6IHUgaXMgSW5kZXhhYmxlICYgVCB7XG4gIHJldHVybiAodHlwZW9mIHUgPT09ICdvYmplY3QnICYmIHUgIT09IG51bGwpIHx8IHR5cGVvZiB1ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLy8vLy8vLy8vL1xuXG5leHBvcnQgdHlwZSBUYWdNZXRhID0gTWFwPFByb3BlcnR5S2V5LCBVcGRhdGFibGVUYWc+O1xuXG5jb25zdCBUUkFDS0VEX1RBR1MgPSBuZXcgV2Vha01hcDxvYmplY3QsIFRhZ01ldGE+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJ0eVRhZ0ZvcjxUIGV4dGVuZHMgb2JqZWN0PihcbiAgb2JqOiBULFxuICBrZXk6IGtleW9mIFQgfCBzdHJpbmcgfCBzeW1ib2wsXG4gIG1ldGE/OiBUYWdNZXRhXG4pOiB2b2lkIHtcbiAgaWYgKERFQlVHICYmICFpc09iamVjdExpa2Uob2JqKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiBDYW4ndCB1cGRhdGUgYSB0YWcgZm9yIGEgcHJpbWl0aXZlYCk7XG4gIH1cblxuICBsZXQgdGFncyA9IG1ldGEgPT09IHVuZGVmaW5lZCA/IFRSQUNLRURfVEFHUy5nZXQob2JqKSA6IG1ldGE7XG5cbiAgLy8gTm8gdGFncyBoYXZlIGJlZW4gc2V0dXAgZm9yIHRoaXMgb2JqZWN0IHlldCwgcmV0dXJuXG4gIGlmICh0YWdzID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAvLyBEaXJ0eSB0aGUgdGFnIGZvciB0aGUgc3BlY2lmaWMgcHJvcGVydHkgaWYgaXQgZXhpc3RzXG4gIGxldCBwcm9wZXJ0eVRhZyA9IHRhZ3MuZ2V0KGtleSk7XG5cbiAgaWYgKHByb3BlcnR5VGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIHVud3JhcChhc3NlcnRUYWdOb3RDb25zdW1lZCkocHJvcGVydHlUYWcsIG9iaiwga2V5KTtcbiAgICB9XG5cbiAgICBESVJUWV9UQUcocHJvcGVydHlUYWcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWdNZXRhRm9yKG9iajogb2JqZWN0KTogVGFnTWV0YSB7XG4gIGxldCB0YWdzID0gVFJBQ0tFRF9UQUdTLmdldChvYmopO1xuXG4gIGlmICh0YWdzID09PSB1bmRlZmluZWQpIHtcbiAgICB0YWdzID0gbmV3IE1hcCgpO1xuXG4gICAgVFJBQ0tFRF9UQUdTLnNldChvYmosIHRhZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRhZ3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWdGb3I8VCBleHRlbmRzIG9iamVjdD4oXG4gIG9iajogVCxcbiAga2V5OiBrZXlvZiBUIHwgc3RyaW5nIHwgc3ltYm9sLFxuICBtZXRhPzogVGFnTWV0YVxuKTogVXBkYXRhYmxlVGFnIHwgQ29uc3RhbnRUYWcge1xuICBsZXQgdGFncyA9IG1ldGEgPT09IHVuZGVmaW5lZCA/IHRhZ01ldGFGb3Iob2JqKSA6IG1ldGE7XG4gIGxldCB0YWcgPSB0YWdzLmdldChrZXkpO1xuXG4gIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgIHRhZyA9IGNyZWF0ZVVwZGF0YWJsZVRhZygpO1xuICAgIHRhZ3Muc2V0KGtleSwgdGFnKTtcbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9