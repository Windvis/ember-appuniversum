"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dirtyTagFor = dirtyTagFor;
exports.tagMetaFor = tagMetaFor;
exports.tagFor = tagFor;

var _env = require("@glimmer/env");

var _validators = require("./validators");

var _debug = require("./debug");

var _utils = require("./utils");

function isObjectLike(u) {
  return typeof u === 'object' && u !== null || typeof u === 'function';
}

const TRACKED_TAGS = new WeakMap();

function dirtyTagFor(obj, key, meta) {
  if (_env.DEBUG && !isObjectLike(obj)) {
    throw new Error(`BUG: Can't update a tag for a primitive`);
  }

  let tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

  if (tags === undefined) return; // Dirty the tag for the specific property if it exists

  let propertyTag = tags.get(key);

  if (propertyTag !== undefined) {
    if (_env.DEBUG) {
      (0, _utils.unwrap)(_debug.assertTagNotConsumed)(propertyTag, obj, key);
    }

    (0, _validators.DIRTY_TAG)(propertyTag);
  }
}

function tagMetaFor(obj) {
  let tags = TRACKED_TAGS.get(obj);

  if (tags === undefined) {
    tags = new Map();
    TRACKED_TAGS.set(obj, tags);
  }

  return tags;
}

function tagFor(obj, key, meta) {
  let tags = meta === undefined ? tagMetaFor(obj) : meta;
  let tag = tags.get(key);

  if (tag === undefined) {
    tag = (0, _validators.createUpdatableTag)();
    tags.set(key, tag);
  }

  return tag;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxTQUFBLFlBQUEsQ0FBQSxDQUFBLEVBQTZCO0FBQzNCLFNBQVEsT0FBQSxDQUFBLEtBQUEsUUFBQSxJQUF5QixDQUFDLEtBQTNCLElBQUMsSUFBd0MsT0FBQSxDQUFBLEtBQWhELFVBQUE7QUFDRDs7QUFNRCxNQUFNLFlBQVksR0FBRyxJQUFyQixPQUFxQixFQUFyQjs7QUFFTSxTQUFBLFdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFHVTtBQUVkLE1BQUksY0FBUyxDQUFDLFlBQVksQ0FBMUIsR0FBMEIsQ0FBMUIsRUFBaUM7QUFDL0IsVUFBTSxJQUFBLEtBQUEsQ0FBTix5Q0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFKLFNBQUEsR0FBcUIsWUFBWSxDQUFaLEdBQUEsQ0FBckIsR0FBcUIsQ0FBckIsR0FORyxJQU1kLENBTmMsQ0FRZDs7QUFDQSxNQUFJLElBQUksS0FBUixTQUFBLEVBVGMsT0FBQSxDQVdkOztBQUNBLE1BQUksV0FBVyxHQUFHLElBQUksQ0FBSixHQUFBLENBQWxCLEdBQWtCLENBQWxCOztBQUVBLE1BQUksV0FBVyxLQUFmLFNBQUEsRUFBK0I7QUFDN0IsUUFBQSxVQUFBLEVBQVc7QUFDVCx5QkFBQSwyQkFBQSxFQUFBLFdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQTtBQUNEOztBQUVELCtCQUFBLFdBQUE7QUFDRDtBQUNGOztBQUVLLFNBQUEsVUFBQSxDQUFBLEdBQUEsRUFBZ0M7QUFDcEMsTUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFaLEdBQUEsQ0FBWCxHQUFXLENBQVg7O0FBRUEsTUFBSSxJQUFJLEtBQVIsU0FBQSxFQUF3QjtBQUN0QixJQUFBLElBQUksR0FBRyxJQUFQLEdBQU8sRUFBUDtBQUVBLElBQUEsWUFBWSxDQUFaLEdBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQTtBQUNEOztBQUVELFNBQUEsSUFBQTtBQUNEOztBQUVLLFNBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUdVO0FBRWQsTUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFKLFNBQUEsR0FBcUIsVUFBVSxDQUEvQixHQUErQixDQUEvQixHQUFYLElBQUE7QUFDQSxNQUFJLEdBQUcsR0FBRyxJQUFJLENBQUosR0FBQSxDQUFWLEdBQVUsQ0FBVjs7QUFFQSxNQUFJLEdBQUcsS0FBUCxTQUFBLEVBQXVCO0FBQ3JCLElBQUEsR0FBRyxHQUFILHFDQUFBO0FBQ0EsSUFBQSxJQUFJLENBQUosR0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBO0FBQ0Q7O0FBRUQsU0FBQSxHQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVRyB9IGZyb20gJ0BnbGltbWVyL2Vudic7XG5pbXBvcnQgeyBESVJUWV9UQUcsIGNyZWF0ZVVwZGF0YWJsZVRhZywgVXBkYXRhYmxlVGFnLCBDb25zdGFudFRhZyB9IGZyb20gJy4vdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBhc3NlcnRUYWdOb3RDb25zdW1lZCB9IGZyb20gJy4vZGVidWcnO1xuaW1wb3J0IHsgSW5kZXhhYmxlLCB1bndyYXAgfSBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gaXNPYmplY3RMaWtlPFQ+KHU6IFQpOiB1IGlzIEluZGV4YWJsZSAmIFQge1xuICByZXR1cm4gKHR5cGVvZiB1ID09PSAnb2JqZWN0JyAmJiB1ICE9PSBudWxsKSB8fCB0eXBlb2YgdSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8vLy8vLy8vLy9cblxuZXhwb3J0IHR5cGUgVGFnTWV0YSA9IE1hcDxQcm9wZXJ0eUtleSwgVXBkYXRhYmxlVGFnPjtcblxuY29uc3QgVFJBQ0tFRF9UQUdTID0gbmV3IFdlYWtNYXA8b2JqZWN0LCBUYWdNZXRhPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlydHlUYWdGb3I8VCBleHRlbmRzIG9iamVjdD4oXG4gIG9iajogVCxcbiAga2V5OiBrZXlvZiBUIHwgc3RyaW5nIHwgc3ltYm9sLFxuICBtZXRhPzogVGFnTWV0YVxuKTogdm9pZCB7XG4gIGlmIChERUJVRyAmJiAhaXNPYmplY3RMaWtlKG9iaikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJVRzogQ2FuJ3QgdXBkYXRlIGEgdGFnIGZvciBhIHByaW1pdGl2ZWApO1xuICB9XG5cbiAgbGV0IHRhZ3MgPSBtZXRhID09PSB1bmRlZmluZWQgPyBUUkFDS0VEX1RBR1MuZ2V0KG9iaikgOiBtZXRhO1xuXG4gIC8vIE5vIHRhZ3MgaGF2ZSBiZWVuIHNldHVwIGZvciB0aGlzIG9iamVjdCB5ZXQsIHJldHVyblxuICBpZiAodGFncyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgLy8gRGlydHkgdGhlIHRhZyBmb3IgdGhlIHNwZWNpZmljIHByb3BlcnR5IGlmIGl0IGV4aXN0c1xuICBsZXQgcHJvcGVydHlUYWcgPSB0YWdzLmdldChrZXkpO1xuXG4gIGlmIChwcm9wZXJ0eVRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICB1bndyYXAoYXNzZXJ0VGFnTm90Q29uc3VtZWQpKHByb3BlcnR5VGFnLCBvYmosIGtleSk7XG4gICAgfVxuXG4gICAgRElSVFlfVEFHKHByb3BlcnR5VGFnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnTWV0YUZvcihvYmo6IG9iamVjdCk6IFRhZ01ldGEge1xuICBsZXQgdGFncyA9IFRSQUNLRURfVEFHUy5nZXQob2JqKTtcblxuICBpZiAodGFncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGFncyA9IG5ldyBNYXAoKTtcblxuICAgIFRSQUNLRURfVEFHUy5zZXQob2JqLCB0YWdzKTtcbiAgfVxuXG4gIHJldHVybiB0YWdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnRm9yPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICBvYmo6IFQsXG4gIGtleToga2V5b2YgVCB8IHN0cmluZyB8IHN5bWJvbCxcbiAgbWV0YT86IFRhZ01ldGFcbik6IFVwZGF0YWJsZVRhZyB8IENvbnN0YW50VGFnIHtcbiAgbGV0IHRhZ3MgPSBtZXRhID09PSB1bmRlZmluZWQgPyB0YWdNZXRhRm9yKG9iaikgOiBtZXRhO1xuICBsZXQgdGFnID0gdGFncy5nZXQoa2V5KTtcblxuICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICB0YWcgPSBjcmVhdGVVcGRhdGFibGVUYWcoKTtcbiAgICB0YWdzLnNldChrZXksIHRhZyk7XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==