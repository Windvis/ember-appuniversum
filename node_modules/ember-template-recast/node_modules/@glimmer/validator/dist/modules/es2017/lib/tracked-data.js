import { DEBUG } from '@glimmer/env';
import { tagFor, dirtyTagFor } from './meta';
import { assertTagNotConsumed } from './debug';
import { consumeTag } from './tracking';
export function trackedData(key, initializer) {
  let values = new WeakMap();
  let hasInitializer = typeof initializer === 'function';

  function getter(self) {
    consumeTag(tagFor(self, key));
    let value; // If the field has never been initialized, we should initialize it

    if (hasInitializer && !values.has(self)) {
      value = initializer.call(self);
      values.set(self, value);
    } else {
      value = values.get(self);
    }

    return value;
  }

  function setter(self, value) {
    if (DEBUG) {
      assertTagNotConsumed(tagFor(self, key), self, key, true);
    }

    dirtyTagFor(self, key);
    values.set(self, value);
  }

  return {
    getter,
    setter
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvdHJhY2tlZC1kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsS0FBVCxRQUFzQixjQUF0QjtBQUNBLFNBQVMsTUFBVCxFQUFpQixXQUFqQixRQUFvQyxRQUFwQztBQUNBLFNBQVMsb0JBQVQsUUFBcUMsU0FBckM7QUFDQSxTQUFTLFVBQVQsUUFBMkIsWUFBM0I7QUFLQSxPQUFNLFNBQVUsV0FBVixDQUNKLEdBREksRUFFSixXQUZJLEVBRTJCO0FBRS9CLE1BQUksTUFBTSxHQUFHLElBQUksT0FBSixFQUFiO0FBQ0EsTUFBSSxjQUFjLEdBQUcsT0FBTyxXQUFQLEtBQXVCLFVBQTVDOztBQUVBLFdBQVMsTUFBVCxDQUFnQixJQUFoQixFQUF1QjtBQUNyQixJQUFBLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBRCxFQUFPLEdBQVAsQ0FBUCxDQUFWO0FBRUEsUUFBSSxLQUFKLENBSHFCLENBS3JCOztBQUNBLFFBQUksY0FBYyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVAsQ0FBVyxJQUFYLENBQXZCLEVBQXlDO0FBQ3ZDLE1BQUEsS0FBSyxHQUFHLFdBQVksQ0FBQyxJQUFiLENBQWtCLElBQWxCLENBQVI7QUFDQSxNQUFBLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBWCxFQUFpQixLQUFqQjtBQUNELEtBSEQsTUFHTztBQUNMLE1BQUEsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBWCxDQUFSO0FBQ0Q7O0FBRUQsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsV0FBUyxNQUFULENBQWdCLElBQWhCLEVBQXlCLEtBQXpCLEVBQW9DO0FBQ2xDLFFBQUksS0FBSixFQUFXO0FBQ1QsTUFBQSxvQkFBcUIsQ0FBQyxNQUFNLENBQUMsSUFBRCxFQUFPLEdBQVAsQ0FBUCxFQUFvQixJQUFwQixFQUEwQixHQUExQixFQUErQixJQUEvQixDQUFyQjtBQUNEOztBQUVELElBQUEsV0FBVyxDQUFDLElBQUQsRUFBTyxHQUFQLENBQVg7QUFDQSxJQUFBLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBWCxFQUFpQixLQUFqQjtBQUNEOztBQUVELFNBQU87QUFBRSxJQUFBLE1BQUY7QUFBVSxJQUFBO0FBQVYsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUcgfSBmcm9tICdAZ2xpbW1lci9lbnYnO1xuaW1wb3J0IHsgdGFnRm9yLCBkaXJ0eVRhZ0ZvciB9IGZyb20gJy4vbWV0YSc7XG5pbXBvcnQgeyBhc3NlcnRUYWdOb3RDb25zdW1lZCB9IGZyb20gJy4vZGVidWcnO1xuaW1wb3J0IHsgY29uc3VtZVRhZyB9IGZyb20gJy4vdHJhY2tpbmcnO1xuXG5leHBvcnQgdHlwZSBHZXR0ZXI8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gKHNlbGY6IFQpID0+IFRbS10gfCB1bmRlZmluZWQ7XG5leHBvcnQgdHlwZSBTZXR0ZXI8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gKHNlbGY6IFQsIHZhbHVlOiBUW0tdKSA9PiB2b2lkO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2tlZERhdGE8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICBrZXk6IEssXG4gIGluaXRpYWxpemVyPzogKHRoaXM6IFQpID0+IFRbS11cbik6IHsgZ2V0dGVyOiBHZXR0ZXI8VCwgSz47IHNldHRlcjogU2V0dGVyPFQsIEs+IH0ge1xuICBsZXQgdmFsdWVzID0gbmV3IFdlYWtNYXA8VCwgVFtLXT4oKTtcbiAgbGV0IGhhc0luaXRpYWxpemVyID0gdHlwZW9mIGluaXRpYWxpemVyID09PSAnZnVuY3Rpb24nO1xuXG4gIGZ1bmN0aW9uIGdldHRlcihzZWxmOiBUKSB7XG4gICAgY29uc3VtZVRhZyh0YWdGb3Ioc2VsZiwga2V5KSk7XG5cbiAgICBsZXQgdmFsdWU7XG5cbiAgICAvLyBJZiB0aGUgZmllbGQgaGFzIG5ldmVyIGJlZW4gaW5pdGlhbGl6ZWQsIHdlIHNob3VsZCBpbml0aWFsaXplIGl0XG4gICAgaWYgKGhhc0luaXRpYWxpemVyICYmICF2YWx1ZXMuaGFzKHNlbGYpKSB7XG4gICAgICB2YWx1ZSA9IGluaXRpYWxpemVyIS5jYWxsKHNlbGYpO1xuICAgICAgdmFsdWVzLnNldChzZWxmLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdmFsdWVzLmdldChzZWxmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXR0ZXIoc2VsZjogVCwgdmFsdWU6IFRbS10pOiB2b2lkIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGFzc2VydFRhZ05vdENvbnN1bWVkISh0YWdGb3Ioc2VsZiwga2V5KSwgc2VsZiwga2V5LCB0cnVlKTtcbiAgICB9XG5cbiAgICBkaXJ0eVRhZ0ZvcihzZWxmLCBrZXkpO1xuICAgIHZhbHVlcy5zZXQoc2VsZiwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHsgZ2V0dGVyLCBzZXR0ZXIgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=